// 1207. Unique Number of Occurrences

// Given an array of integers arr, return true if the number of occurrences of each value in the array is unique or false otherwise.

// code 


class Solution:
    def uniqueOccurrences(self, arr: List[int]) -> bool:

        dictt = {}


        for i in arr :

            dictt[i] = dictt.get(i , 0) + 1

        dictt_set = set(dictt.values())

        
        return len(dictt) == len(dictt_set) 

       


// 1657. Determine if Two Strings Are Close

// Two strings are considered close if you can attain one from the other using the following operations:

// Operation 1: Swap any two existing characters.
// For example, abcde -> aecdb
// Operation 2: Transform every occurrence of one existing character into another existing character, and do the same with the other character.
// For example, aacabb -> bbcbaa (all a's turn into b's, and all b's turn into a's)
// You can use the operations on either string as many times as necessary.

// Given two strings, word1 and word2, return true if word1 and word2 are close, and false otherwise.

// code 

class Solution:
    def closeStrings(self, word1: str, word2: str) -> bool:

        dict_word1 = {}
        dict_word2 = {}

        if len(word1) != len(word2) :

            return False

        for i in word1 :

            dict_word1[i] = dict_word1.get(i , 0) + 1

        for i in word2 :

            dict_word2[i] = dict_word2.get(i , 0) + 1


        if set(dict_word1.keys()) != set(dict_word2.keys()) :

            return False

        return sorted(dict_word1.values()) == sorted(dict_word2.values())


