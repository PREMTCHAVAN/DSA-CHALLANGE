450. Delete Node in a BST

Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.
Basically, the deletion can be divided into two stages:

Search for a node to remove.
If the node is found, delete the node.


code

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def deleteNode(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]:

        if root is None : return root

        if key < root.val :
            
            if root.left :

                root.left =self.deleteNode( root.left , key )

        elif key > root.val :

            if root.right :

                root.right = self.deleteNode( root.right , key )

        else :

            if root.left is None :
                return root.right

            elif root.right is None :
                return root.left

                
            node = root.right


            while node.left is not None :

                node = node.left 


            root.val = node.val

            root.right = self.deleteNode( root.right , node.val )



        return root        
