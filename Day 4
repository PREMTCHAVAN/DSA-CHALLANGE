// 334. Increasing Triplet Subsequence

// Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.

class Solution:
    def increasingTriplet(self, nums: List[int]) -> bool:

        f_num = s_num = float('inf')

        for i in nums :

            if i <= f_num :

                f_num = i

            elif i <= s_num :

                s_num = i
            
            else :

                return True

        
        return False


// 238. Product of Array Except Self

// Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
// The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
// You must write an algorithm that runs in O(n) time and without using the division operation.

class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        
            n = len(nums)

            left_list = [1] * n
            Right_list = [1] * n

            answer = [1] * n

            for i in range(1,n):

                left_list[i] = left_list[i - 1] * nums[i - 1]

            for j in range(n - 2,-1,-1) :

                Right_list[j] = Right_list[j + 1] * nums[j + 1]
            
            for k in range(n) :

                answer[k] = left_list[k] * Right_list[k]
            

            return answer
