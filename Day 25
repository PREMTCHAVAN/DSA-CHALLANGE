LEARNING ABOUT TREES

IMPLEMENTING BINARY SEARCH TREE , INSERTION OPERATION
                                , SEARCH OPERATION
                                , TRAVERSAL , PRE-ORDER
                                            , IN-ORDER
                                            , POST-ORDER

                                , FINDING SMALLEST ELEMENT 
                                , FINDING LARGEST ELEMENT 


code 


class BST :

    def __init__(self , key ) :

        self.key = key
        self.Lchild = None
        self.Rchild = None

    def insert(self , data ) :

        if self.key is None :

            self.key = data
            return 

        if self.key == data :

            return

        if self.key > data :

            if self.Lchild :

                self.Lchild.insert(data)
                
            else :

                self.Lchild = BST(data)

        else :

            if self.Rchild :

                self.Rchild.insert(data)

            else :

                self.Rchild = BST(data)


    def search(self , data ) :

        if self.key == data :

            print(" FOUND ")
            return
        
        if data < self.key :

            if self.Lchild :

                self.Lchild.search(data)
            
            else :

                print(" NOT FOUND ")

        else :

            if self.Rchild :

                self.Rchild.search(data)

            else :

                print(" NOT FOUND ")


    def preorder(self) :

        print(self.key)

        if self.Lchild :

            self.Lchild.preorder()

        if self.Rchild :

            self.Rchild.preorder()

    
    def inorder(self) :

        if self.Lchild :

            self.Lchild.inorder()

        print(self.key)

        if self.Rchild :

            self.Rchild.inorder()

    
    def postorder(self) :

        if self.Lchild :

            self.Lchild.postorder()

        if self.Rchild :

            self.Rchild.postorder()

        print(self.key)


    
    def smallest_ele(self) :

        if self.Lchild is None and self.Rchild is None :

            print(" SMALLEST ELEMENT " , self.key )

        else :

            self.Lchild.smallest_ele()

    

    def largest_ele( self ) :

        if self.Lchild is None and self.Rchild is None :

            print(" LARGEST ELEMENT " , self.key )

        else :

            self.Rchild.largest_ele()




obj = BST(30)

lis = [ 20 , 40 , 55 , 699 , 212 , 700 ]

for i in lis :

    obj.insert(i)

print(" PREORDER TRAVERSAL ")
obj.preorder()

print(" INORDER TRAVERSAL ")
obj.inorder()

print(" POSTORDER TRAVERSAL ")
obj.postorder()

obj.smallest_ele()
obj.largest_ele()


