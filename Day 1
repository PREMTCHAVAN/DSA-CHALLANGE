# You are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string.

# code 

class Solution:
    def mergeAlternately(self, word1: str, word2: str) -> str:
        
        res = ""
        min_len = min(len(word1),len(word2))
        i = 0

        for i in range(min_len):

            res += word1[i]+word2[i]
        
        if len(word1) > len(word2):

            res += word1[min_len:]
        
        elif len(word2) > len(word1):

            res += word2[min_len:]

        return res 

                


# For two strings s and t, we say "t divides s" if and only if s = t + t + t + ... + t + t (i.e., t is concatenated with itself one or more times).

# Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.


#code 


class Solution:
    def gcdOfStrings(self, str1: str, str2: str) -> str:
        

        if len(str2) > len(str1):

            return self.gcdOfStrings(str2,str1)

        
        if str2 == str1:

            return str2

        if str1.startswith(str2):

            return self.gcdOfStrings( str1[len(str2):],str2)

        return ""

