
1161. Maximum Level Sum of a Binary Tree

Given the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on.
Return the smallest level x such that the sum of all the values of nodes at level x is maximal.


code

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxLevelSum(self, root: Optional[TreeNode]) -> int:

        if root is None : return 0

        q = [root]
        max_sum = float('-inf')
        max_level = 1
        level = 1
        
        while q :
            level_sum = 0
            next_level = []
        
            for node in q :
        
                level_sum += node.val
        
                if node.left :
                    next_level.append(node.left)
        
                if node.right :
                    next_level.append(node.right)
        
            if level_sum > max_sum :
                max_sum = level_sum
                max_level = level
        
            q = next_level
            level += 1
        
        return max_level 






700. Search in a Binary Search Tree
]
You are given the root of a binary search tree (BST) and an integer val.
Find the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.


code 


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
        
    def searchBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:
        
        if root is None : return root
        if root.val == val : return root

        if val < root.val :
            return self.searchBST( root.left , val )    
        
        else :
            return self.searchBST( root.right , val )    
 
