
1382. Balance a Binary Search Tree

Given the root of a binary search tree, return a balanced binary search tree with the same node values. If there is more than one answer, return any of them.

A binary search tree is balanced if the depth of the two subtrees of every node never differs by more than 1.

 

Example 1:


Input: root = [1,null,2,null,3,null,4,null,null]
Output: [2,1,3,null,null,null,4]
Explanation: This is not the only correct answer, [3,1,4,null,2] is also correct.
Example 2:


Input: root = [2,1,3]
Output: [2,1,3]


code


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def balanceBST(self, root: TreeNode) -> TreeNode:


        def inorder_traversal( node ) :

            if not node :

                return []

            left_node = inorder_traversal( node.left )
            right_node = inorder_traversal( node.right )

            return left_node + [ node.val ] + right_node

        
        sorted_vals = inorder_traversal( root )


        def balance_tree ( values ) :

            
            if not values :
                return None 

            m = len( values ) // 2

            root = TreeNode( values[m] )
            root.left = balance_tree( values[:m] )
            root.right = balance_tree( values[m + 1:])

            return root


        
        return balance_tree( sorted_vals )
        
