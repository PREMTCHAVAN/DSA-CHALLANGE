735. Asteroid Collision

We are given an array asteroids of integers representing asteroids in a row.
For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.
Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.

// code 

class Solution:
    def asteroidCollision(self, asteroids: List[int]) -> List[int]:

        stk = []

        for a in asteroids :

            while stk and  a < 0 < stk[-1] :

                if abs(a) > stk[-1] :

                    stk.pop()

                elif abs(a) == stk[-1] :

                    stk.pop()
                    break

                else :

                    break

            else :

                stk.append(a)

        return stk 
 


394. Decode String

Given an encoded string, return its decoded string.
The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.
You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].
The test cases are generated so that the length of the output will never exceed 105.


// code 


class Solution:
    def decodeString(self, s: str) -> str:

        stk = []

        for i in s :

            if i != "]" :

                stk.append(i)

            else :

                stringg = ""

                while stk[-1] != "[" :

                    stringg = stk.pop() + stringg

                stk.pop()

                k = ""

                while stk and stk[-1].isdigit() :

                    k = stk.pop() + k

                stk.append(int(k) * stringg ) 

        return "".join(stk)
        



 
